package com.gempukku.lotro.cards.unofficial.pc.errata.set01;

import com.gempukku.lotro.framework.VirtualTableScenario;
import com.gempukku.lotro.common.*;
import com.gempukku.lotro.game.CardNotFoundException;
import com.gempukku.lotro.game.PhysicalCardImpl;
import com.gempukku.lotro.logic.decisions.DecisionResultInvalidException;
import com.gempukku.lotro.logic.modifiers.AddKeywordModifier;
import org.junit.Test;

import java.util.HashMap;

import static org.junit.Assert.*;

public class Card_01_009_ErrataTests
{

	protected VirtualTableScenario GetScenario() throws CardNotFoundException, DecisionResultInvalidException {
		return new VirtualTableScenario(
				new HashMap<>()
				{{
					put("axe", "51_9");
					put("gimli", "1_13");

					put("scout", "1_191");
					put("runner", "1_178");
				}},
				VirtualTableScenario.FellowshipSites,
				VirtualTableScenario.FOTRFrodo,
				VirtualTableScenario.RulingRing
		);
	}

	@Test
	public void DwarvenAxeStatsAndKeywordsAreCorrect() throws DecisionResultInvalidException, CardNotFoundException {

		/**
		* Set: 1
		* Title: Dwarven Axe
		* Unique: False
		* Side: FREE_PEOPLE
		* Culture: Dwarven
		* Twilight Cost: 0
		* Type: possession
		* Subtype: Hand Weapon
		* Strength: 2
		* Game Text: Bearer must be a Dwarf. <br>Each time a minion loses a skirmish to bearer, that minion's owner must exert a minion or discard the bottom card of their draw deck.
		*/

		//Pre-game setup
		var scn = GetScenario();

		var card = scn.GetFreepsCard("axe");

		assertFalse(card.getBlueprint().isUnique());
		assertEquals(Side.FREE_PEOPLE, card.getBlueprint().getSide());
		assertEquals(Culture.DWARVEN, card.getBlueprint().getCulture());
		assertEquals(CardType.POSSESSION, card.getBlueprint().getCardType());
		assertTrue(card.getBlueprint().getPossessionClasses().contains(PossessionClass.HAND_WEAPON));
		assertEquals(0, card.getBlueprint().getTwilightCost());
		assertEquals(2, card.getBlueprint().getStrength());
	}

	@Test
	public void AxeMustBeBorneByDwarf() throws DecisionResultInvalidException, CardNotFoundException {
		//Pre-game setup
		var scn = GetScenario();

		var axe = scn.GetFreepsCard("axe");
		var gimli = scn.GetFreepsCard("gimli");
		scn.MoveCardsToHand(axe, gimli);

		scn.StartGame();
		assertFalse(scn.FreepsPlayAvailable(axe));
		scn.FreepsPlayCard(gimli);
		assertTrue(scn.FreepsPlayAvailable(axe));
	}

	@Test
	public void AxeCausesExertOrDeckDiscardChoice() throws DecisionResultInvalidException, CardNotFoundException {
		//Pre-game setup
		var scn = GetScenario();

		var axe = scn.GetFreepsCard("axe");
		var gimli = scn.GetFreepsCard("gimli");
		var frodo = scn.GetRingBearer();
		scn.MoveCompanionToTable(gimli);
		scn.AttachCardsTo(gimli, axe);

		var scout = scn.GetShadowCard("scout");
		var runner = scn.GetShadowCard("runner");
		scn.MoveMinionToTable(runner,scout);

		scn.ApplyAdHocModifier(new KeywordModifier(null, Race.ORC, Keyword.FIERCE));

		scn.StartGame();

		scn.SkipToAssignments();
		scn.FreepsDeclineAssignments();
		scn.ShadowAssignToMinions(new PhysicalCardImpl[]{gimli, runner}, new PhysicalCardImpl[]{frodo,scout});

		scn.FreepsResolveSkirmish(gimli);
		scn.PassCurrentPhaseActions();
		scn.FreepsResolveActionOrder("Axe");
		assertTrue(scn.ShadowDecisionAvailable("choose"));

		assertEquals(0, scn.GetWoundsOn(scout));
		scn.ShadowChooseOption("exert");
		assertEquals(1, scn.GetWoundsOn(scout));

		scn.FreepsResolveSkirmish(frodo);
		scn.PassCurrentPhaseActions();
		scn.FreepsDeclineOptionalTrigger(); // ring

		//Fierce assignment
		scn.SkipToAssignments();
		scn.FreepsAssignToMinions(gimli, scout);
		scn.FreepsResolveSkirmish(gimli);
		scn.PassCurrentPhaseActions();

		var botcard = scn.GetShadowBottomOfDeck();
		assertEquals(Zone.DECK, botcard.getZone());
		assertEquals(2, scn.GetShadowDeckCount());
		assertEquals(1, scn.GetShadowDiscardCount());
		scn.FreepsResolveActionOrder("Axe");
		assertEquals(Zone.DISCARD, botcard.getZone());
		assertEquals(1, scn.GetShadowDeckCount());
		assertEquals(3, scn.GetShadowDiscardCount());//runner, scout, and a card discarded from the deck

	}

	@Test
	public void AxeAffectsMultipleMinionsSeparately() throws DecisionResultInvalidException, CardNotFoundException {
		//Pre-game setup
		var scn = GetScenario();

		var axe = scn.GetFreepsCard("axe");
		var gimli = scn.GetFreepsCard("gimli");
		scn.MoveCompanionToTable(gimli);
		scn.AttachCardsTo(gimli, axe);

		var scout = scn.GetShadowCard("scout");
		var runner = scn.GetShadowCard("runner");
		scn.MoveMinionToTable(scout, runner);

		scn.StartGame();

		scn.SkipToAssignments();
		scn.FreepsDeclineAssignments();
		scn.ShadowAssignToMinions(gimli, scout, runner);

		//pump gimli up using his ability so he's strong enough to beat both orcs
		scn.FreepsResolveSkirmish(gimli);
		scn.FreepsUseCardAction(gimli);
		scn.ShadowPassCurrentPhaseAction();
		scn.FreepsUseCardAction(gimli);
		scn.ShadowPassCurrentPhaseAction();
		scn.FreepsPassCurrentPhaseAction();
		scn.FreepsResolveActionOrder("Axe");
		assertTrue(scn.ShadowDecisionAvailable("choose"));
		scn.ShadowChooseOption("exert");

		assertEquals(2, scn.GetShadowDeckCount());
		assertEquals(0, scn.GetShadowDiscardCount());
		scn.FreepsResolveActionOrder("Axe");
		assertEquals(1, scn.GetShadowDeckCount());
		assertEquals(3, scn.GetShadowDiscardCount());//runner, scout, and a card discarded from the deck
	}
}
