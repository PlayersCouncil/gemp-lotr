package com.gempukku.lotro.cards.unofficial.pc.errata.set01;

import com.gempukku.lotro.framework.VirtualTableScenario;
import com.gempukku.lotro.common.CardType;
import com.gempukku.lotro.common.Culture;
import com.gempukku.lotro.common.Keyword;
import com.gempukku.lotro.common.Side;
import com.gempukku.lotro.game.CardNotFoundException;
import com.gempukku.lotro.logic.decisions.DecisionResultInvalidException;
import org.junit.Test;

import java.util.HashMap;

import static org.junit.Assert.*;

public class Card_01_316_ErrataTests
{

	protected VirtualTableScenario GetScenario() throws CardNotFoundException, DecisionResultInvalidException {
		return new VirtualTableScenario(
				new HashMap<>()
				{{
					put("talent1", "71_316");
					put("talent2", "71_316");
					put("sam", "1_311");
					put("merry", "1_302");
					put("pippin", "1_306");
				}},
				VirtualTableScenario.FellowshipSites,
				VirtualTableScenario.FOTRFrodo,
				VirtualTableScenario.FOTRRing
		);
	}

	@Test
	public void ATalentforNotBeingSeenStatsAndKeywordsAreCorrect() throws DecisionResultInvalidException, CardNotFoundException {

		/**
		* Set: 1
		* Title: A Talent for Not Being Seen
		* Unique: True
		* Side: FREE_PEOPLE
		* Culture: Shire
		* Twilight Cost: 0
		* Type: condition
		* Subtype: 
		* Game Text: <b>Stealth.</b>  To play, exert Merry or Pippin.  Bearer must be Merry or Pippin.
		* 	Each site's Shadow number is -1.
		*/

		//Pre-game setup
		var scn = GetScenario();

		var card = scn.GetFreepsCard("talent1");

		assertFalse(card.getBlueprint().isUnique());
		assertEquals(Side.FREE_PEOPLE, card.getBlueprint().getSide());
		assertEquals(Culture.SHIRE, card.getBlueprint().getCulture());
		assertEquals(CardType.CONDITION, card.getBlueprint().getCardType());
		assertFalse(scn.HasKeyword(card, Keyword.SUPPORT_AREA));
		assertEquals(0, card.getBlueprint().getTwilightCost());
	}

	@Test
	public void TalentExertsAndPlaysOnMerryOrPippin() throws DecisionResultInvalidException, CardNotFoundException {
		//Pre-game setup
		VirtualTableScenario scn = GetScenario();

		var frodo = scn.GetRingBearer();
		var sam = scn.GetFreepsCard("sam");
		var merry = scn.GetFreepsCard("merry");
		var pippin = scn.GetFreepsCard("pippin");
		var talent1 = scn.GetFreepsCard("talent1");
		var talent2 = scn.GetFreepsCard("talent2");

		scn.MoveCardsToHand(talent1,talent2, sam, merry, pippin);

		scn.StartGame();

		assertFalse(scn.FreepsPlayAvailable(talent1));
		scn.FreepsPlayCard(sam);
		assertFalse(scn.FreepsPlayAvailable(talent1));

		scn.FreepsPlayCard(merry);
		assertTrue(scn.FreepsPlayAvailable(talent1));
		assertEquals(0, scn.GetWoundsOn(merry));
		scn.FreepsPlayCard(talent1);
		assertEquals(1, scn.GetWoundsOn(merry));
		assertSame(merry, talent1.getAttachedTo());

		scn.FreepsPlayCard(pippin);
		scn.FreepsPlayCard(talent2);

		//There are 4 companions in play, but only 2 valid targets for the exert
		assertEquals(2, scn.GetFreepsCardChoiceCount());
		scn.FreepsChooseCard(merry);

		//plays automatically on pippin, since merry is already bearing one
		assertEquals(2, scn.GetWoundsOn(merry));
		assertEquals(0, scn.GetWoundsOn(pippin));
		assertSame(pippin, talent2.getAttachedTo());
	}


	@Test
	public void TalentReducesShadowBy1() throws DecisionResultInvalidException, CardNotFoundException {
		//Pre-game setup
		VirtualTableScenario scn = GetScenario();

		var frodo = scn.GetRingBearer();
		var merry = scn.GetFreepsCard("merry");
		var talent1 = scn.GetFreepsCard("talent1");

		scn.MoveCompanionToTable(merry);
		scn.AttachCardsTo(merry, talent1);

		scn.StartGame();
		scn.FreepsPassCurrentPhaseAction();

		// 2 for Frodo/Merry, 2 for the site, -1 for Talent
		assertEquals(3, scn.GetTwilight());

	}
}
